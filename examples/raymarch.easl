@{group 0
  binding 0
  address uniform}
(var dimensions: vec2f)

@{group 0
  binding 1
  address uniform}
(var time: f32)

(struct VertexOutput
  @{builtin position} vertex-pos: vec4f)

(def triangles: u32
     1)

@vertex
(defn vertex [@{builtin vertex-index}
              vertex-index: u32]: VertexOutput
  (VertexOutput (vec4f (match vertex-index
                         0 (vec2f -1.)
                         1 (vec2f -1. 3.)
                         _ (vec2f 3. -1.))
                       0.
                       1.)))

(enum (Option T) None (Some T))

(struct Ray
  pos: vec3f
  dir: vec3f)

(defn advance [r: Ray
               d: f32]: Ray
  (Ray (+ r.pos (* d r.dir)) r.dir))

(defn gradient [f: (Fn [vec3f] f32)
                x: vec3f]: vec3f
  (let [center (f x)]
    (vec3f (- (f (+ x (vec3f 0.001 0. 0.)))
              center)
           (- (f (+ x (vec3f 0. 0.001 0.)))
              center)
           (- (f (+ x (vec3f 0. 0. 0.001)))
              center))))

(defn raymarch [sdf: (Fn [vec3f] f32)
                ray: Ray]: (Option vec3f)
  (let [@var current-dist 0.]
    (for [i 0 (< i 256) (= i (+ i 1))]
      (let [current-pos (.pos (advance ray current-dist))
            dist (sdf current-pos)]
        (when (< (abs dist) 0.001)
          (return (Some (normalize (gradient sdf current-pos)))))
        (+= current-dist dist)))
    None))

(defn sd-scene [pos: vec3f]: f32
  (+ (- (distance pos (vec3f 0. 0. 2.))
        1.)
     (* 0.1
        (cos (+ (* 11. pos.x) (* 9. time))))
     (* 0.07
        (cos (+ 2. (* 3. pos.y) (* 4. time))))
     (* 0.09
        (cos (+ 5. (* 9. pos.z) (* 12. time))))))

@fragment
(defn fragment [in: VertexOutput]: @{location 0} vec4f
  (let [screen-pos (-> in.vertex-pos.xy
                       (/ dimensions)
                       (* 2.)
                       (- 1.)
                       (* (/ dimensions
                             (min dimensions.x dimensions.y))))
        surface-normal (raymarch sd-scene
                                 (Ray (vec3f 0.)
                                      (normalize (vec3f screen-pos 1.))))]
    (match surface-normal
      (Some surface-normal) (-> surface-normal
                                (+ 1.)
                                (* 0.5)
                                (pow (vec3f 2.2))
                                (vec4f 1.))
      None (vec4f (vec3f 0.) 1.))))
